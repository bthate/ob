#!/usr/bin/env python3
# This file is placed in the Public Domain.

import os, sys ; sys.path.insert(0, os.getcwd())

import inspect
import pkgutil

def spl(txt):
    return [x for x in txt.split(",") if x]

class Table(object):

    def __init__(self):
        super().__init__()
        self.classes = {}
        self.cmds = {}
        self.fulls = {}
        self.names = {}
        self.modules = {}
        self.table = {}

    def addcmd(self, func):
        n = func.__name__
        self.modules[n] = func.__module__
        self.cmds[n] = func

    def addcls(self, clz):
        nn = "%s.%s" % (clz.__module__, clz.__name__)
        if nn in self.classes:
            return
        n = clz.__name__.lower()
        if n not in self.names:
            self.names[n] = []
        if n not in self.names[n]:
            self.names[n].append(nn)
        self.classes[nn] = clz

    def addmod(self, mod):
        n = mod.__spec__.name
        self.fulls[n.split(".")[-1]] = n
        self.table[n] = mod

    def getcls(self, name):
        return self.classes.get(name, None)

    def getcmd(self, c):
        return self.cmds.get(c, None)

    def getfull(self, c):
        return self.fulls.get(c, None)

    def getmod(self, mn):
        return self.table.get(mn, None)

    def getnames(self, nm, dft=None):
        return self.names.get(nm, dft)

    def getmodule(self, mn, dft):
        return self.modules.get(mn, dft)

    def introspect(self, mod):
        self.addmod(mod)
        classes = find_cls(mod)
        for nm, c in classes.items():
            self.addcls(c)
        commands = find_cmd(mod)
        for nm, c in commands.items():
            self.addcmd(c)

    def scan(self, pkgs=""):
        res = {}
        for pn in spl(pkgs):
            try:
                mod = __import__(pn)
            except ModuleNotFoundError:
                return
            for mn in pkgutil.walk_packages(mod.__path__, pn+"."):
                zip = mn[0].find_module(mn[1])
                mod = zip.load_module(mn[1])
                res.update(find_cls(mod))
                self.introspect(mod)

def find_cls(mod):
    res = {}
    pn = mod.__package__
    for key, o in inspect.getmembers(mod, inspect.isclass):
        n = "%s.%s" % (o.__module__, o.__name__)
        res[n] = o
    return res

def find_cmd(mod):
    res = {}
    for key, o in inspect.getmembers(mod, inspect.isfunction):
        if o.__code__.co_argcount == 1 and "event" in o.__code__.co_varnames:
            res[o.__name__] = o
    return res

def find_func(mod):
    res = {}
    for key, o in inspect.getmembers(mod, inspect.isfunction):
        if key in do:
            if "event" not in o.__code__.co_varnames:
                res[o.__name__] = o
    return res

def main():
    t = Table()
    t.scan("om,on,od,oe,ob")
    print(t.classes)
    print(t.fulls)
    print(t.names)
    print(t.modules)

if __name__ == "__main__":
    main()

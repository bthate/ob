#!/usr/bin/env python3
# This file is placed in the Public Domain.

import os, sys ; sys.path.insert(0, os.getcwd())

from ob.bus import Bus
from ob.clt import Client
from ob.err import Restart
from ob.hdl import Handler
from ob.krn import Kernel, getdir
from ob.obj import cfg
from ob.tbl import Table
from ob.ver import __version__

import atexit
import ob
import os
import readline
import sys
import termios

name = "ob"
pkgs = ",ob,om"

resume = {}

class CLI(Client):

    def error(self, e):
        print(e.exc)
        raise Restart

    def raw(self, txt):
        print(txt)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def rse(event):
    raise Restart

def ver(event):
    event.reply("%s %s" % (Kernel.cfg.name.upper(), Kernel.cfg.version))

def main():
    cfg.version = __version__
    cfg.wd = os.path.expanduser("~/.obdata")
    Table.addcmd(rse)
    Table.addcmd(ver)
    k = Kernel()
    k.boot(name, cfg.version)
    k.start()
    if k.cfg.txt:
        k.scan(pkgs)
        c = CLI()
        return c.cmd(k.cfg.otxt)
    if k.opts("c"):
        k.scan(k.cfg.pkgs+pkgs)
        csl = Console()
        csl.start()
        k.wait()

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

wrap(main)

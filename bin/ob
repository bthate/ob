#!/usr/bin/env python3
# This file is placed in the Public Domain.

"python3 object library"

import atexit
import ob
import os
import sys
import termios

ob.wd = os.path.expanduser("~/.ob")

from ob import Restart, Handler, Kernel, launch

import om.all
import on.all

k = Kernel()
k.cfg.p = "om,on"
k.cfg.m = ""
resume = {}

def cprint(*args):
    print(*args)
    sys.stdout.flush()

class CLI(Handler):

    def error(self, e):
        cprint(e.exc)
        raise Restart

    def handle(self, e):
        k.put(e)
        e.wait()

    def raw(self, txt):
        cprint(txt)

class Console(CLI):

    def error(self, e):
        cprint(e.exc)
        raise Restart

    def handle(self, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        cprint(txt)

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

def wrap(func):
    termsave()
    try:
        func()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

def main():
    if "-d" in sys.argv:
        daemon()
        k.boot()
        k.writepid()
        k.start()
        k.wait()
        k.removepid()
        return
    k.parse_cli()
    if k.opts("s"):
        k.cfg.save()
    elif k.cfg.txt:
        k.boot()
        k.start()
        cli = CLI()
        k.cmd(cli, k.cfg.otxt)
    elif k.opts("k"):
        k.kill()
    elif k.opts("c") or k.cfg.m:
        k.boot()
        k.start()
        csl = Console()
        csl.start()
        k.wait()

wrap(main)
